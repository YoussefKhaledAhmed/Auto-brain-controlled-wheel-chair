# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'window1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QProcess , QTimer
#from MainProcesses import *
import sys
import os

from Auto_Window import *
from Manual_Window import *

class Ui_MainWindow(object):
    def __init__(self):
        self.centralWidget = None
        self.secWindow = None
        self.ui = None
        self.thirdWindow = None
        self.Manual = None
        self.Automatic = None
        self.menubar = None
        self.statusbar = None
        self.process1 = None
        self.process2 = None
        self.ManualFlag = None
        self.AutoFlag = None

    def openAutoWindow(self):
        self.secWindow = QMainWindow()
        self.ui = autoWindow()
        self.ui.setupUi(self.secWindow)
        self.ui.show()
     
    def openManualWindow(self):
        self.thirdWindow = QtWidgets.QMainWindow()
        self.ui = Window()
        self.ui.setupUi(self.thirdWindow)
        self.ui.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(923, 600)
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralwidget")
        self.Manual = QtWidgets.QPushButton(self.centralWidget)
        self.Manual.setGeometry(QtCore.QRect(280, 230, 171, 101))
        self.Manual.setObjectName("Manual")
        self.Manual.clicked.connect(self.openManualWindow)
        self.Manual.clicked.connect(self.Process1)
        self.Automatic = QtWidgets.QPushButton(self.centralWidget)
        self.Automatic.setGeometry(QtCore.QRect(504, 232, 161, 101))
        self.Automatic.setObjectName("Automatic")
        self.Automatic.clicked.connect(self.openAutoWindow)
        self.Automatic.clicked.connect(self.Process2)
        MainWindow.setCentralWidget(self.centralWidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 923, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.reTranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def reTranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Manual.setText(_translate("MainWindow", "Manual"))
        self.Automatic.setText(_translate("MainWindow", "Automatic"))

    def Process1(self):
        t = "1"
        #fileName = "Selim_12_7_2023.csv"
        fileName = "Alaa_10_8_2023.csv"
        liveFilePath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/recorded_Data/Real_time/live"
        offlineFilePath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/recorded_Data/Real_time/offline"
        #pcaName = "pca_Selim_12_7_2023.sav"
        pcaName = "pca_Alaa_10_8_2023.sav"
        pcaPath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/PCA_models/"
        MlModelsPath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/trained_MLModels/"
        #MlName = "LogisticRegression_Selim_12_7_2023"
        MlName = "RF_Alaa_10_8_2023"
        if self.process2 is not None: self.process2.kill()
        self.process1 = QProcess(self.Manual)
        self.process1.readyReadStandardOutput.connect(self.print_output_process1)
        self.process1.start('python', ['Manual_Process.py',t, fileName, liveFilePath , pcaName , pcaPath, MlModelsPath, MlName])
        # self.process1.waitForFinished()

    def Process2(self):
        """
        MAMEN data:
        """
        dir_ = os.path.abspath(
            "D:\Graduation Project\Brain-controlled-wheelchair-with-self-driving-mode\BCI_ssvep_Training\SSVEP Data (BrainWheel)")
        requiredFolder = "/subject_5"
        files = "/U0000[a | b | c | d | e | f | g | h | i | j | k]*.csv"  # this will get all the paths of the files in this folder as a list of paths
        MAMEN_path = dir_ + requiredFolder + files

        ############################################
        t = "1"
        # fileName = "Selim_12_7_2023.csv"
        fileName = "Alaa_10_8_2023.csv"
        liveFilePath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/recorded_Data/Real_time/live"
        offlineFilePath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/recorded_Data/Real_time/offline"
        # pcaName = "pca_Selim_12_7_2023.sav"
        pcaName = "pca_Alaa_10_8_2023.sav"
        pcaPath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/PCA_models/"
        MlModelsPath = "D:/Graduation Project/Brain-controlled-wheelchair-with-self-driving-mode/trained_MLModels/"
        # MlName = "LogisticRegression_Selim_12_7_2023"
        MlName = "RF_Alaa_10_8_2023"
        if self.process1 is not None: self.process1.kill()
        self.process2 = QProcess(self.Automatic)
        self.process2.readyReadStandardOutput.connect(self.print_output_process2)
        self.process2.start('python', ['Auto_Process.py',t, fileName, liveFilePath , pcaName , pcaPath, MlModelsPath, MlName])
        # self.process2.waitForFinished()

    def print_output_process1(self):
        data = self.process1.readAllStandardOutput()
        output = bytes(data).decode().strip()
        print(output)

    def print_output_process2(self):
        data = self.process2.readAllStandardOutput()
        output = bytes(data).decode().strip()
        print(output)

def process_1():
    application = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    application.exec_()


if __name__ == "__main__":
    process_1()
